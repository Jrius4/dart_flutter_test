// To parse this JSON data, do
//
//     final autogenerated = autogeneratedFromMap(jsonString);

import 'dart:convert';

class Autogenerated {
  Autogenerated({
    this.toggleSideBar,
    this.authData,
    this.cooperative,
    this.edit,
    this.formData,
    this.editStatus,
    this.cType,
  });

  bool toggleSideBar;
  AuthData authData;
  Cooperative cooperative;
  Edit edit;
  List<FormDatumElement> formData;
  bool editStatus;
  String cType;

  Autogenerated copyWith({
    bool toggleSideBar,
    AuthData authData,
    Cooperative cooperative,
    Edit edit,
    List<FormDatumElement> formData,
    bool editStatus,
    String cType,
  }) =>
      Autogenerated(
        toggleSideBar: toggleSideBar ?? this.toggleSideBar,
        authData: authData ?? this.authData,
        cooperative: cooperative ?? this.cooperative,
        edit: edit ?? this.edit,
        formData: formData ?? this.formData,
        editStatus: editStatus ?? this.editStatus,
        cType: cType ?? this.cType,
      );

  factory Autogenerated.fromJson(String str) =>
      Autogenerated.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Autogenerated.fromMap(Map<String, dynamic> json) => Autogenerated(
        toggleSideBar: json["toggleSideBar"],
        authData: AuthData.fromMap(json["authData"]),
        cooperative: Cooperative.fromMap(json["cooperative"]),
        edit: Edit.fromMap(json["edit"]),
        formData: List<FormDatumElement>.from(
            json["formData"].map((x) => FormDatumElement.fromMap(x))),
        editStatus: json["edit_status"],
        cType: json["c_type"],
      );

  Map<String, dynamic> toMap() => {
        "toggleSideBar": toggleSideBar,
        "authData": authData.toMap(),
        "cooperative": cooperative.toMap(),
        "edit": edit.toMap(),
        "formData": List<dynamic>.from(formData.map((x) => x.toMap())),
        "edit_status": editStatus,
        "c_type": cType,
      };
}

class AuthData {
  AuthData({
    this.id,
    this.cooperativeName,
    this.email,
    this.password,
    this.token,
    this.code,
    this.isAuthenticated,
    this.isCompleted,
    this.createdAt,
    this.updatedAt,
    this.phone,
    this.cType,
  });

  int id;
  String cooperativeName;
  String email;
  String password;
  String token;
  dynamic code;
  int isAuthenticated;
  int isCompleted;
  DateTime createdAt;
  DateTime updatedAt;
  String phone;
  String cType;

  AuthData copyWith({
    int id,
    String cooperativeName,
    String email,
    String password,
    String token,
    dynamic code,
    int isAuthenticated,
    int isCompleted,
    DateTime createdAt,
    DateTime updatedAt,
    String phone,
    String cType,
  }) =>
      AuthData(
        id: id ?? this.id,
        cooperativeName: cooperativeName ?? this.cooperativeName,
        email: email ?? this.email,
        password: password ?? this.password,
        token: token ?? this.token,
        code: code ?? this.code,
        isAuthenticated: isAuthenticated ?? this.isAuthenticated,
        isCompleted: isCompleted ?? this.isCompleted,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        phone: phone ?? this.phone,
        cType: cType ?? this.cType,
      );

  factory AuthData.fromJson(String str) => AuthData.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory AuthData.fromMap(Map<String, dynamic> json) => AuthData(
        id: json["id"],
        cooperativeName: json["cooperative_name"],
        email: json["email"],
        password: json["password"],
        token: json["token"],
        code: json["code"],
        isAuthenticated: json["is_authenticated"],
        isCompleted: json["is_completed"],
        createdAt: DateTime.parse(json["created_at"]),
        updatedAt: DateTime.parse(json["updated_at"]),
        phone: json["phone"],
        cType: json["c_type"],
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "cooperative_name": cooperativeName,
        "email": email,
        "password": password,
        "token": token,
        "code": code,
        "is_authenticated": isAuthenticated,
        "is_completed": isCompleted,
        "created_at": createdAt.toIso8601String(),
        "updated_at": updatedAt.toIso8601String(),
        "phone": phone,
        "c_type": cType,
      };
}

class Cooperative {
  Cooperative({
    this.id,
    this.userId,
    this.name,
    this.email,
    this.phone,
    this.logo,
    this.contactName,
    this.contactEmail,
    this.contactPhone,
    this.contactRole,
    this.createdAt,
    this.updatedAt,
    this.cType,
    this.subscriptionStatus,
    this.subscription,
    this.createdBy,
    this.accountStatus,
    this.subscriptionRenewedDate,
    this.days,
    this.trialDays,
    this.runningStatus,
  });

  int id;
  int userId;
  String name;
  String email;
  String phone;
  dynamic logo;
  dynamic contactName;
  dynamic contactEmail;
  String contactPhone;
  dynamic contactRole;
  DateTime createdAt;
  DateTime updatedAt;
  String cType;
  String subscriptionStatus;
  dynamic subscription;
  int createdBy;
  String accountStatus;
  DateTime subscriptionRenewedDate;
  int days;
  int trialDays;
  String runningStatus;

  Cooperative copyWith({
    int id,
    int userId,
    String name,
    String email,
    String phone,
    dynamic logo,
    dynamic contactName,
    dynamic contactEmail,
    String contactPhone,
    dynamic contactRole,
    DateTime createdAt,
    DateTime updatedAt,
    String cType,
    String subscriptionStatus,
    dynamic subscription,
    int createdBy,
    String accountStatus,
    DateTime subscriptionRenewedDate,
    int days,
    int trialDays,
    String runningStatus,
  }) =>
      Cooperative(
        id: id ?? this.id,
        userId: userId ?? this.userId,
        name: name ?? this.name,
        email: email ?? this.email,
        phone: phone ?? this.phone,
        logo: logo ?? this.logo,
        contactName: contactName ?? this.contactName,
        contactEmail: contactEmail ?? this.contactEmail,
        contactPhone: contactPhone ?? this.contactPhone,
        contactRole: contactRole ?? this.contactRole,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        cType: cType ?? this.cType,
        subscriptionStatus: subscriptionStatus ?? this.subscriptionStatus,
        subscription: subscription ?? this.subscription,
        createdBy: createdBy ?? this.createdBy,
        accountStatus: accountStatus ?? this.accountStatus,
        subscriptionRenewedDate:
            subscriptionRenewedDate ?? this.subscriptionRenewedDate,
        days: days ?? this.days,
        trialDays: trialDays ?? this.trialDays,
        runningStatus: runningStatus ?? this.runningStatus,
      );

  factory Cooperative.fromJson(String str) =>
      Cooperative.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Cooperative.fromMap(Map<String, dynamic> json) => Cooperative(
        id: json["id"],
        userId: json["user_id"],
        name: json["name"],
        email: json["email"],
        phone: json["phone"],
        logo: json["logo"],
        contactName: json["contact_name"],
        contactEmail: json["contact_email"],
        contactPhone: json["contact_phone"],
        contactRole: json["contact_role"],
        createdAt: DateTime.parse(json["created_at"]),
        updatedAt: DateTime.parse(json["updated_at"]),
        cType: json["c_type"],
        subscriptionStatus: json["subscription_status"],
        subscription: json["subscription"],
        createdBy: json["created_by"],
        accountStatus: json["account_status"],
        subscriptionRenewedDate:
            DateTime.parse(json["subscription_renewed_date"]),
        days: json["days"],
        trialDays: json["trial_days"],
        runningStatus: json["running_status"],
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "user_id": userId,
        "name": name,
        "email": email,
        "phone": phone,
        "logo": logo,
        "contact_name": contactName,
        "contact_email": contactEmail,
        "contact_phone": contactPhone,
        "contact_role": contactRole,
        "created_at": createdAt.toIso8601String(),
        "updated_at": updatedAt.toIso8601String(),
        "c_type": cType,
        "subscription_status": subscriptionStatus,
        "subscription": subscription,
        "created_by": createdBy,
        "account_status": accountStatus,
        "subscription_renewed_date": subscriptionRenewedDate.toIso8601String(),
        "days": days,
        "trial_days": trialDays,
        "running_status": runningStatus,
      };
}

class Edit {
  Edit({
    this.editStatic,
    this.editDynamic,
  });

  Static editStatic;
  List<Dynamic> editDynamic;

  Edit copyWith({
    Static editStatic,
    List<Dynamic> editDynamic,
  }) =>
      Edit(
        editStatic: editStatic ?? this.editStatic,
        editDynamic: editDynamic ?? this.editDynamic,
      );

  factory Edit.fromJson(String str) => Edit.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Edit.fromMap(Map<String, dynamic> json) => Edit(
        editStatic: Static.fromMap(json["static"]),
        editDynamic:
            List<Dynamic>.from(json["dynamic"].map((x) => Dynamic.fromMap(x))),
      );

  Map<String, dynamic> toMap() => {
        "static": editStatic.toMap(),
        "dynamic": List<dynamic>.from(editDynamic.map((x) => x.toMap())),
      };
}

class Dynamic {
  Dynamic({
    this.formData,
    this.categoryId,
    this.header,
    this.category,
  });

  FormData formData;
  int categoryId;
  FormDatumElement header;
  dynamic category;

  Dynamic copyWith({
    FormData formData,
    int categoryId,
    FormDatumElement header,
    dynamic category,
  }) =>
      Dynamic(
        formData: formData ?? this.formData,
        categoryId: categoryId ?? this.categoryId,
        header: header ?? this.header,
        category: category ?? this.category,
      );

  factory Dynamic.fromJson(String str) => Dynamic.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Dynamic.fromMap(Map<String, dynamic> json) => Dynamic(
        formData: FormData.fromMap(json["formData"]),
        categoryId: json["category_id"],
        header: FormDatumElement.fromMap(json["header"]),
        category: json["category"],
      );

  Map<String, dynamic> toMap() => {
        "formData": formData.toMap(),
        "category_id": categoryId,
        "header": header.toMap(),
        "category": category,
      };
}

class CategoryElement {
  CategoryElement({
    this.label,
    this.position,
    this.conditions,
    this.fieldType,
    this.description,
    this.isRequired,
    this.fieldOptions,
    this.fieldInputName,
    this.isDynamic,
    this.rows,
  });

  String label;
  String position;
  List<Condition> conditions;
  String fieldType;
  String description;
  Is isRequired;
  String fieldOptions;
  String fieldInputName;
  Is isDynamic;
  Map<String, Row> rows;

  CategoryElement copyWith({
    String label,
    String position,
    List<Condition> conditions,
    String fieldType,
    String description,
    Is isRequired,
    String fieldOptions,
    String fieldInputName,
    Is isDynamic,
    Map<String, Row> rows,
  }) =>
      CategoryElement(
        label: label ?? this.label,
        position: position ?? this.position,
        conditions: conditions ?? this.conditions,
        fieldType: fieldType ?? this.fieldType,
        description: description ?? this.description,
        isRequired: isRequired ?? this.isRequired,
        fieldOptions: fieldOptions ?? this.fieldOptions,
        fieldInputName: fieldInputName ?? this.fieldInputName,
        isDynamic: isDynamic ?? this.isDynamic,
        rows: rows ?? this.rows,
      );

  factory CategoryElement.fromJson(String str) =>
      CategoryElement.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory CategoryElement.fromMap(Map<String, dynamic> json) => CategoryElement(
        label: json["label"],
        position: json["position"] == null ? null : json["position"],
        conditions: List<Condition>.from(
            json["conditions"].map((x) => Condition.fromMap(x))),
        fieldType: json["field_type"],
        description: json["description"] == null ? null : json["description"],
        isRequired: json["is_required"] == null
            ? null
            : isValues.map[json["is_required"]],
        fieldOptions: json["field_options"],
        fieldInputName: json["field_input_name"],
        isDynamic: json["is_dynamic"] == null
            ? null
            : isValues.map[json["is_dynamic"]],
        rows: json["rows"] == null
            ? null
            : Map.from(json["rows"])
                .map((k, v) => MapEntry<String, Row>(k, Row.fromMap(v))),
      );

  Map<String, dynamic> toMap() => {
        "label": label,
        "position": position == null ? null : position,
        "conditions": List<dynamic>.from(conditions.map((x) => x.toMap())),
        "field_type": fieldType,
        "description": description == null ? null : description,
        "is_required": isRequired == null ? null : isValues.reverse[isRequired],
        "field_options": fieldOptions,
        "field_input_name": fieldInputName,
        "is_dynamic": isDynamic == null ? null : isValues.reverse[isDynamic],
        "rows": rows == null
            ? null
            : Map.from(rows)
                .map((k, v) => MapEntry<String, dynamic>(k, v.toMap())),
      };
}

class Condition {
  Condition({
    this.logic,
    this.field,
    this.response,
  });

  Logic logic;
  String field;
  The10DoYouUnderstandTheImportanceOfTheAnnualGeneralMeeting response;

  Condition copyWith({
    Logic logic,
    String field,
    The10DoYouUnderstandTheImportanceOfTheAnnualGeneralMeeting response,
  }) =>
      Condition(
        logic: logic ?? this.logic,
        field: field ?? this.field,
        response: response ?? this.response,
      );

  factory Condition.fromJson(String str) => Condition.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Condition.fromMap(Map<String, dynamic> json) => Condition(
        logic: logicValues.map[json["logic"]],
        field: json["field"] == null ? null : json["field"],
        response: json["response"] == null
            ? null
            : the10DoYouUnderstandTheImportanceOfTheAnnualGeneralMeetingValues
                .map[json["response"]],
      );

  Map<String, dynamic> toMap() => {
        "logic": logicValues.reverse[logic],
        "field": field == null ? null : field,
        "response": response == null
            ? null
            : the10DoYouUnderstandTheImportanceOfTheAnnualGeneralMeetingValues
                .reverse[response],
      };
}

enum Logic { SELECTED }

final logicValues = EnumValues({"selected": Logic.SELECTED});

enum Is { ON }

final isValues = EnumValues({"on": Is.ON});

class Row {
  Row({
    this.name,
    this.type,
    this.values,
  });

  String name;
  Type type;
  String values;

  Row copyWith({
    String name,
    Type type,
    String values,
  }) =>
      Row(
        name: name ?? this.name,
        type: type ?? this.type,
        values: values ?? this.values,
      );

  factory Row.fromJson(String str) => Row.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Row.fromMap(Map<String, dynamic> json) => Row(
        name: json["name"],
        type: typeValues.map[json["type"]],
        values: json["values"] == null ? null : json["values"],
      );

  Map<String, dynamic> toMap() => {
        "name": name,
        "type": typeValues.reverse[type],
        "values": values == null ? null : values,
      };
}

enum Type { ALPHANUMERIC_RESPONSES, DROPDOWN, NUMERIC_RESPONSES, DATE }

final typeValues = EnumValues({
  "Alphanumeric Responses": Type.ALPHANUMERIC_RESPONSES,
  "Date": Type.DATE,
  "Dropdown": Type.DROPDOWN,
  "Numeric Responses": Type.NUMERIC_RESPONSES
});

class CategoryValue {
  CategoryValue({
    this.label,
    this.position,
    this.conditions,
    this.fieldType,
    this.description,
    this.isRequired,
    this.fieldOptions,
    this.fieldInputName,
    this.isDynamic,
  });

  String label;
  String position;
  List<Condition> conditions;
  String fieldType;
  String description;
  Is isRequired;
  String fieldOptions;
  String fieldInputName;
  Is isDynamic;

  CategoryValue copyWith({
    String label,
    String position,
    List<Condition> conditions,
    String fieldType,
    String description,
    Is isRequired,
    String fieldOptions,
    String fieldInputName,
    Is isDynamic,
  }) =>
      CategoryValue(
        label: label ?? this.label,
        position: position ?? this.position,
        conditions: conditions ?? this.conditions,
        fieldType: fieldType ?? this.fieldType,
        description: description ?? this.description,
        isRequired: isRequired ?? this.isRequired,
        fieldOptions: fieldOptions ?? this.fieldOptions,
        fieldInputName: fieldInputName ?? this.fieldInputName,
        isDynamic: isDynamic ?? this.isDynamic,
      );

  factory CategoryValue.fromJson(String str) =>
      CategoryValue.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory CategoryValue.fromMap(Map<String, dynamic> json) => CategoryValue(
        label: json["label"],
        position: json["position"],
        conditions: List<Condition>.from(
            json["conditions"].map((x) => Condition.fromMap(x))),
        fieldType: json["field_type"],
        description: json["description"] == null ? null : json["description"],
        isRequired: json["is_required"] == null
            ? null
            : isValues.map[json["is_required"]],
        fieldOptions: json["field_options"],
        fieldInputName: json["field_input_name"],
        isDynamic: json["is_dynamic"] == null
            ? null
            : isValues.map[json["is_dynamic"]],
      );

  Map<String, dynamic> toMap() => {
        "label": label,
        "position": position,
        "conditions": List<dynamic>.from(conditions.map((x) => x.toMap())),
        "field_type": fieldType,
        "description": description == null ? null : description,
        "is_required": isRequired == null ? null : isValues.reverse[isRequired],
        "field_options": fieldOptions,
        "field_input_name": fieldInputName,
        "is_dynamic": isDynamic == null ? null : isValues.reverse[isDynamic],
      };
}

class FormDatumElement {
  FormDatumElement({
    this.id,
    this.cooperativeId,
    this.name,
    this.fieldsType,
    this.isComplete,
    this.position,
    this.lastUpdatedBy,
    this.createdAt,
    this.updatedAt,
    this.isMemberField,
    this.fieldType,
    this.alterId,
    this.fields,
    this.fieldsCount,
  });

  int id;
  dynamic cooperativeId;
  String name;
  String fieldsType;
  int isComplete;
  int position;
  int lastUpdatedBy;
  DateTime createdAt;
  DateTime updatedAt;
  int isMemberField;
  String fieldType;
  dynamic alterId;
  List<CategoryElement> fields;
  int fieldsCount;

  FormDatumElement copyWith({
    int id,
    dynamic cooperativeId,
    String name,
    String fieldsType,
    int isComplete,
    int position,
    int lastUpdatedBy,
    DateTime createdAt,
    DateTime updatedAt,
    int isMemberField,
    String fieldType,
    dynamic alterId,
    List<CategoryElement> fields,
    int fieldsCount,
  }) =>
      FormDatumElement(
        id: id ?? this.id,
        cooperativeId: cooperativeId ?? this.cooperativeId,
        name: name ?? this.name,
        fieldsType: fieldsType ?? this.fieldsType,
        isComplete: isComplete ?? this.isComplete,
        position: position ?? this.position,
        lastUpdatedBy: lastUpdatedBy ?? this.lastUpdatedBy,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        isMemberField: isMemberField ?? this.isMemberField,
        fieldType: fieldType ?? this.fieldType,
        alterId: alterId ?? this.alterId,
        fields: fields ?? this.fields,
        fieldsCount: fieldsCount ?? this.fieldsCount,
      );

  factory FormDatumElement.fromJson(String str) =>
      FormDatumElement.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory FormDatumElement.fromMap(Map<String, dynamic> json) =>
      FormDatumElement(
        id: json["id"],
        cooperativeId: json["cooperative_id"],
        name: json["name"],
        fieldsType: json["fields_type"],
        isComplete: json["is_complete"],
        position: json["position"],
        lastUpdatedBy: json["last_updated_by"],
        createdAt: DateTime.parse(json["created_at"]),
        updatedAt: DateTime.parse(json["updated_at"]),
        isMemberField: json["is_member_field"],
        fieldType: json["field_type"],
        alterId: json["alter_id"],
        fields: List<CategoryElement>.from(
            json["fields"].map((x) => CategoryElement.fromMap(x))),
        fieldsCount: json["fields_count"],
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "cooperative_id": cooperativeId,
        "name": name,
        "fields_type": fieldsType,
        "is_complete": isComplete,
        "position": position,
        "last_updated_by": lastUpdatedBy,
        "created_at": createdAt.toIso8601String(),
        "updated_at": updatedAt.toIso8601String(),
        "is_member_field": isMemberField,
        "field_type": fieldType,
        "alter_id": alterId,
        "fields": List<dynamic>.from(fields.map((x) => x.toMap())),
        "fields_count": fieldsCount,
      };
}

class Static {
  Static({
    this.id,
    this.cooperativeId,
    this.groupId,
    this.fieldData,
    this.createdAt,
    this.updatedAt,
    this.isComplete,
    this.position,
    this.dateCaptured,
    this.name,
    this.admissionDate,
    this.membershipNo,
    this.dob,
    this.age,
    this.nationality,
    this.idType,
    this.idNumber,
    this.address,
    this.district,
    this.subCounty,
    this.parish,
    this.village,
    this.pictureName,
    this.isIndivMember,
    this.fields,
    this.formData,
  });

  int id;
  int cooperativeId;
  dynamic groupId;
  String fieldData;
  DateTime createdAt;
  DateTime updatedAt;
  int isComplete;
  dynamic position;
  DateTime dateCaptured;
  String name;
  DateTime admissionDate;
  String membershipNo;
  DateTime dob;
  String age;
  String nationality;
  String idType;
  String idNumber;
  String address;
  String district;
  String subCounty;
  String parish;
  String village;
  String pictureName;
  String isIndivMember;
  List<StaticField> fields;
  List<FormDatumClass> formData;

  Static copyWith({
    int id,
    int cooperativeId,
    dynamic groupId,
    String fieldData,
    DateTime createdAt,
    DateTime updatedAt,
    int isComplete,
    dynamic position,
    DateTime dateCaptured,
    String name,
    DateTime admissionDate,
    String membershipNo,
    DateTime dob,
    String age,
    String nationality,
    String idType,
    String idNumber,
    String address,
    String district,
    String subCounty,
    String parish,
    String village,
    String pictureName,
    String isIndivMember,
    List<StaticField> fields,
    List<FormDatumClass> formData,
  }) =>
      Static(
        id: id ?? this.id,
        cooperativeId: cooperativeId ?? this.cooperativeId,
        groupId: groupId ?? this.groupId,
        fieldData: fieldData ?? this.fieldData,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        isComplete: isComplete ?? this.isComplete,
        position: position ?? this.position,
        dateCaptured: dateCaptured ?? this.dateCaptured,
        name: name ?? this.name,
        admissionDate: admissionDate ?? this.admissionDate,
        membershipNo: membershipNo ?? this.membershipNo,
        dob: dob ?? this.dob,
        age: age ?? this.age,
        nationality: nationality ?? this.nationality,
        idType: idType ?? this.idType,
        idNumber: idNumber ?? this.idNumber,
        address: address ?? this.address,
        district: district ?? this.district,
        subCounty: subCounty ?? this.subCounty,
        parish: parish ?? this.parish,
        village: village ?? this.village,
        pictureName: pictureName ?? this.pictureName,
        isIndivMember: isIndivMember ?? this.isIndivMember,
        fields: fields ?? this.fields,
        formData: formData ?? this.formData,
      );

  factory Static.fromJson(String str) => Static.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Static.fromMap(Map<String, dynamic> json) => Static(
        id: json["id"],
        cooperativeId: json["cooperative_id"],
        groupId: json["group_id"],
        fieldData: json["field_data"],
        createdAt: DateTime.parse(json["created_at"]),
        updatedAt: DateTime.parse(json["updated_at"]),
        isComplete: json["is_complete"],
        position: json["position"],
        dateCaptured: DateTime.parse(json["date_captured"]),
        name: json["name"],
        admissionDate: DateTime.parse(json["admission_date"]),
        membershipNo: json["membership_no"],
        dob: DateTime.parse(json["dob"]),
        age: json["age"],
        nationality: json["nationality"],
        idType: json["id_type"],
        idNumber: json["id_number"],
        address: json["address"],
        district: json["district"],
        subCounty: json["sub_county"],
        parish: json["parish"],
        village: json["village"],
        pictureName: json["picture_name"],
        isIndivMember: json["is_indiv_member"],
        fields: List<StaticField>.from(
            json["fields"].map((x) => StaticField.fromMap(x))),
        formData: List<FormDatumClass>.from(
            json["form_data"].map((x) => FormDatumClass.fromMap(x))),
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "cooperative_id": cooperativeId,
        "group_id": groupId,
        "field_data": fieldData,
        "created_at":
            "${createdAt.year.toString().padLeft(4, '0')}-${createdAt.month.toString().padLeft(2, '0')}-${createdAt.day.toString().padLeft(2, '0')}",
        "updated_at": updatedAt.toIso8601String(),
        "is_complete": isComplete,
        "position": position,
        "date_captured": dateCaptured.toIso8601String(),
        "name": name,
        "admission_date":
            "${admissionDate.year.toString().padLeft(4, '0')}-${admissionDate.month.toString().padLeft(2, '0')}-${admissionDate.day.toString().padLeft(2, '0')}",
        "membership_no": membershipNo,
        "dob":
            "${dob.year.toString().padLeft(4, '0')}-${dob.month.toString().padLeft(2, '0')}-${dob.day.toString().padLeft(2, '0')}",
        "age": age,
        "nationality": nationality,
        "id_type": idType,
        "id_number": idNumber,
        "address": address,
        "district": district,
        "sub_county": subCounty,
        "parish": parish,
        "village": village,
        "picture_name": pictureName,
        "is_indiv_member": isIndivMember,
        "fields": List<dynamic>.from(fields.map((x) => x.toMap())),
        "form_data": List<dynamic>.from(formData.map((x) => x.toMap())),
      };
}

class StaticField {
  StaticField({
    this.formData,
    this.categoryId,
  });

  String formData;
  int categoryId;

  StaticField copyWith({
    String formData,
    int categoryId,
  }) =>
      StaticField(
        formData: formData ?? this.formData,
        categoryId: categoryId ?? this.categoryId,
      );

  factory StaticField.fromJson(String str) =>
      StaticField.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory StaticField.fromMap(Map<String, dynamic> json) => StaticField(
        formData: json["formData"],
        categoryId: json["category_id"],
      );

  Map<String, dynamic> toMap() => {
        "formData": formData,
        "category_id": categoryId,
      };
}

class FormDatumClass {
  FormDatumClass({
    this.formData,
    this.categoryId,
  });

  FormData formData;
  int categoryId;

  FormDatumClass copyWith({
    FormData formData,
    int categoryId,
  }) =>
      FormDatumClass(
        formData: formData ?? this.formData,
        categoryId: categoryId ?? this.categoryId,
      );

  factory FormDatumClass.fromJson(String str) =>
      FormDatumClass.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory FormDatumClass.fromMap(Map<String, dynamic> json) => FormDatumClass(
        formData: FormData.fromMap(json["formData"]),
        categoryId: json["category_id"],
      );

  Map<String, dynamic> toMap() => {
        "formData": formData.toMap(),
        "category_id": categoryId,
      };
}

class EnumValues<T> {
  Map<String, T> map;
  late Map<T, String> reverseMap;

  EnumValues({this.map, this.reverseMap});

  Map<T, String> get reverse {
    if (reverseMap == null) {
      reverseMap = map.map((k, v) => new MapEntry(v, k));
    }
    return reverseMap;
  }
}
